/**
 * Flowtype definitions for react-hot-loader
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'react-hot-loader' {
    declare interface ErrorReporterProps {
        error: any
    }
    declare export interface AppContainerProps {
        children?: React.ReactElement<any>,
            errorReporter?: React.ComponentClass<ErrorReporterProps>| React.StatelessComponent<ErrorReporterProps >
    }
    declare export class AppContainer mixins React.Component<AppContainerProps, React.ComponentState>{}

    /**
     * Marks module and a returns a HOC to mark a Component inside it as hot-exported
     * @param  ALWAYS should be just "module".
     * @return  "hot" HOC.
     * @example  marks current module as hot, and export MyComponent as HotExportedMyComponent
    export default hot(module)(MyComponent)
    */
    declare export function hot(module: any):<T>(Component: T) => T


    /**
     * Marks component as `cold`, and making it invisible for React-Hot-Loader.
     * Any changes to that component will cause local state loss.
     * @param  to chill
     * @return  component, as it was passed in.
     * @example  marks some component as cold
    export default cold(MyComponent)
    */
    declare export function cold<T>(component: T): T


    /**
     * Tests are types of two components equal
     * @param  undefined
     * @param  undefined
     * @return  are they equal
     * @example  test that some rendered component(ReactElement), has the same type as BaseComponent
    areComponentEqual(RenderedComponent.type, BaseComponent)
    */
    declare export function areComponentsEqual<T>(typeA: React.ComponentType<T>, typeB: React.ComponentType<T>): boolean

    declare export interface Config {

        /**
         * Specify loglLevel, default to 'error', set it to false to disable logs.
         * Available levels: ['debug', 'log', 'warn', 'error']
         */
        logLevel?: string,

            /**
             *
             * @param  being registered. This could be ANY top level variable among project.
             * @param  - variable name
             * @param  - origin file
             * @return  undefined
             */
            onComponentRegister?: (type: any, uniqueLocalName: string, fileName: string) => any
    }

    /**
     * Confugures how React Hot Loader works
     * @param  undefined
     */
    declare export function setConfig(config: Config): void

}